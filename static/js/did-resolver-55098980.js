function h(o,e){try{var t=o()}catch(r){return e(r)}return t&&t.then?t.then(void 0,e):t}function m(){const o=new Map;return function(e,t){try{let n=function(c){if(r)return c;const u=o.get(e.didUrl);return u!==void 0?u:Promise.resolve(t()).then(function(a){var d;return((d=a.didResolutionMetadata)==null?void 0:d.error)!=="notFound"&&o.set(e.didUrl,a),a})},r;const i=function(){if(e.params&&e.params["no-cache"]==="true")return Promise.resolve(t()).then(function(c){return r=1,c})}();return Promise.resolve(i&&i.then?i.then(n):n(i))}catch(r){return Promise.reject(r)}}}function R(o,e){return e()}const v="(?:%[0-9a-fA-F]{2})",l=`(?:[a-zA-Z0-9._-]|${v})`,p="([a-z0-9]+)",M=`((?:${l}*:)*(${l}+))`,f="[a-zA-Z0-9_.:%-]",y=`;${f}+=${f}*`,P=`((${y})*)`,$="(/[^#?]*)?",g="([?][^#]*)?",A="(#.*)?",_=new RegExp(`^did:${p}:${M}${P}${$}${g}${A}$`);function D(o){if(o===""||!o)return null;const e=o.match(_);if(e){const t={did:`did:${e[1]}:${e[2]}`,method:e[1],id:e[2],didUrl:o};if(e[4]){const r=e[4].slice(1).split(";");t.params={};for(const n of r){const i=n.split("=");t.params[i[0]]=i[1]}}return e[6]&&(t.path=e[6]),e[7]&&(t.query=e[7].slice(1)),e[8]&&(t.fragment=e[8].slice(1)),t}return null}const s={didResolutionMetadata:{},didDocument:null,didDocumentMetadata:{}};function E(o){return function(e,t,r){try{return Promise.resolve(h(function(){return Promise.resolve(o(e,t,r)).then(function(n){return{...s,didResolutionMetadata:{contentType:"application/did+ld+json"},didDocument:n}})},function(n){return{...s,didResolutionMetadata:{error:"notFound",message:n.toString()}}}))}catch(n){return Promise.reject(n)}}}class T{constructor(e={},t={}){this.registry=void 0,this.cache=void 0,this.registry=e,this.cache=t.cache===!0?m():t.cache||R,t.legacyResolvers&&Object.keys(t.legacyResolvers).map(r=>{this.registry[r]||(this.registry[r]=E(t.legacyResolvers[r]))})}resolve(e,t={}){try{const r=this,n=D(e);if(n===null)return Promise.resolve({...s,didResolutionMetadata:{error:"invalidDid"}});const i=r.registry[n.method];return i?Promise.resolve(r.cache(n,()=>i(n.did,n,r,t))):Promise.resolve({...s,didResolutionMetadata:{error:"unsupportedDidMethod"}})}catch(r){return Promise.reject(r)}}}export{T as R,D as p};
